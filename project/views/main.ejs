<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Document</title>
  <script src="https://kit.fontawesome.com/d44f71ab07.js" crossorigin="anonymous"></script>
  <script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
  <script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>

  <style>
    * {
      margin: 0;
      padding: 0;
      text-decoration: none;
    }

    body,
    html {
      font-family: "Kaushan Script";
      height: 100%;
    }

    header,
    #sideBar {
      background-color: #e0f0ff;
      border: 1px solid black;
    }

    header {
      display: flex;
      align-items: center;
      height: 7vh;
      padding: 0 10px;
    }

    header #logoLink {
      font-size: 24px;
      font-weight: bold;
    }

    #search1 {
      margin-left: auto;
      display: flex;
      align-items: center;
    }

    #searchBox1 {
      margin-left: 5px;
      padding: 5px;
      border: 1px solid black;
      border-radius: 10px;
    }

    #gearIcon1 {
      margin-left: 10px;
      cursor: pointer;
    }

    /* 수정된 부분 시작: fa-gear 옵션 애니메이션 */
    .options {
      max-height: 0;
      opacity: 0;
      overflow: hidden;
      position: absolute;
      right: 10px;
      top: 7vh;
      background-color: #e0f0ff;
      border: 1px solid black;
      border-radius: 10px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
      transition: max-height 0.5s ease-in-out, opacity 0.5s ease-in-out;
    }

    .options.show {
      max-height: 300px;
      /* 충분히 큰 값으로 설정 */
      opacity: 1;
    }

    .options div {
      padding: 10px;
      cursor: pointer;
    }

    .options div:hover {
      background-color: #c1e2ff;
    }

    /* 수정된 부분 끝 */

      main {
        display: flex;
        height: 93vh;
      }

      #sideBar {
        width: 250px;
        padding: 5px;
        display: flex;
        flex-direction: column;
        gap: 10px;
      }

      #myProfile {
        display: flex;
        align-items: center;
        padding: 10px;
        border: 1px solid black;
        border-radius: 10px;
        cursor: pointer;
      }

      .sideCategory {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 10px;
        border: 1px solid black;
        border-radius: 10px;
        cursor: pointer;
      }

      #gearIcon2 {
        display: none;
      }

      #myProfile ul {
        display: none;
      }

      #myProfile .fa-user {
        font-size: 24px;
      }

      .sideCategory ul {
        max-height: 0;
        opacity: 0;
        overflow: hidden;
        list-style: none;
        padding: 0;
        margin-top: 10px;
        transition: max-height 0.5s ease-in-out, opacity 0.5s ease-in-out;
      }

      .sideCategory.expanded ul {
        max-height: 200px;
        opacity: 1;
        width: 80%;
      }

      .sideCategory ul li {
        padding: 5px;
        background-color: #c1e2ff;
        border: 1px solid black;
        border-radius: 10px;
        margin: 2px 0;
      }

    #content {
      flex: 1;
      background-color: aliceblue;
    }


      .vertical-layout {
        display: flex;
        flex-direction: column;
        /* width: 100%; */
      }

      #userBox {
        display: flex;
        flex-wrap: wrap;
        justify-content: flex-start;
        gap: 20px; /* 간격 */
        padding: 15px;
        /* width: 100%; */
        margin: 30px auto;
        background-color: white;
        border-radius: 10px;
        height: auto; /* 높이를 자동으로 조정 */
      }

      #userBox > div {
        flex: 0 0 200; /* 한 줄에 세 개의 아이템이 들어가도록 너비 설정 */
        max-width: 200px; /* 각 박스 최대 너비 */
        height: 100px;
        padding: 10px;
        border-radius: 10px;
        background-color: whitesmoke;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        text-align: left;
        display: flex;
        flex-direction: column;
        justify-content: center;
        margin-bottom: 10px;
      }

      #userBox p {
        margin: 5px 0;
        font-size: 14px;
        color: black;
      }

      #msgBox {
        display: flex;
        flex-direction: column; /* 한 줄에 하나씩 */
        padding: 15px;
        width: 100%;
        margin: 10px auto;
        background-color: white;
        border-radius: 10px;
      }

      #msgBox > div {
        width: 100%;
        margin-bottom: 10px;
        padding: 15px;
        border-radius: 10px;
        background-color: whitesmoke;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      }

      #msgBox p {
        margin: 5px 0;
        font-size: 14px;
        color: black;
      }

      .highlight {
        background-color: #c1e2ff;
        font-weight: bold;
      }

      #chatContainer {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        padding: 15px;
        background-color: #f9f9f9;
        border-radius: 10px;
      }

      #user-container {
        text-align: center;
        margin-bottom: 15px;
      }

      #wrapper {
        flex: 1;
        overflow-y: auto;
      }

      .msg-container {
        display: flex;
        flex-direction: column;
        overflow-y: scroll;
        width: 500px;
        height: 600px;
        justify-content: center;
      }

      .talk {
        position: relative;
        /* max-width: 60%; */
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 10px;
        background-color: #dfe7ef;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      }

      .talk.received {
        align-self: flex-start;
        background-color: #d1e7fd;
      }

      .talk.sent {
        align-self: flex-end;
        background-color: #c1f0c1;
      }

      .message {
        margin-top: 5px;
        background-color: inherit;
      }
      .myMsg{
        display: flex;
        justify-content: end;
        padding: 2px;
        position: relative;
      }
      .myMsg {
        background-color: yellow;
        margin: 0px;
        padding: 5px 10px;
        border-radius: 20px;
        width: fit-content;
      }
      .eachMsg{
        display: flex;
        justify-content: start;
        padding: 2px;
        position: relative;
      }
      .eachMsg {
        background-color: white;
        margin: 0px;
        padding: 5px 10px;
        border-radius: 20px;
        width: fit-content;
      }
      .each
      #send {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      }

      #chatting-input {
        flex: 1;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 10px;
        margin-right: 10px;
      }

      #send-button {
        padding: 10px 20px;
        background-color: #c1e2ff;
        color: white;
        border: none;
        border-radius: 10px;
        cursor: pointer;
      }

      @media (max-width: 768px) {
        /* 반응형 헤더 */
        header {
          justify-content: space-between;
          border-bottom: none;
        }
        header .fa-bars {
          display: block !important;
          cursor: pointer;
        }
        #search1 {
          display: none !important;
        }
        #search2 {
          height: 10vh;
          display: flex !important;
          flex-direction: row;
          align-items: center;
          background-color: #e0f0ff;
          justify-content: center;
          border: 1px solid black;
          border-top: none;
        }
        #searchBox2 {
          width: 50vw;
          margin-left: 5px;
          padding: 7px;
          border: 1px solid black;
          border-radius: 10px;
        }
        /* 반응형 사이드 바 */
        #sideBar {
          width: 250px;
          padding: 5px;
          display: flex;
          flex-direction: column;
          gap: 10px;
          position: absolute;
          left: -500px; /* 사이드바를 화면 밖으로 위치시킴 */
          height: 100vh;
          transition: transform 0.5s ease-in-out; /* 트랜지션 설정 */
        }
        #sideBar.show {
          transform: translateX(500px); /* 100vw만큼 오른쪽으로 이동 */
        }
        #gearIcon2 {
          display: inline-block !important;
        }
        #myProfile {
          display: flex;
          flex-direction: column;
          align-items: center;
          padding: 10px;
          border: 1px solid black;
          border-radius: 10px;
          cursor: pointer;
        }
        #myProfile .fa-user {
          font-size: 24px;
        }
        #profileBox {
          width: 100% !important;
          display: flex;
        }
        #myProfile ul {
          display: block !important;
          max-height: 0;
          opacity: 0;
          overflow: hidden;
          list-style: none;
          padding: 0;
          margin-top: 10px;
          width: 100%;
          background-color: #e0f0ff;
          /* border: 1px solid black; */
          border-radius: 10px;
          transition: max-height 0.5s ease-in-out, opacity 0.5s ease-in-out;
        }
        #myProfile.expanded ul {
          max-height: 200px;
          opacity: 1;
        }
        #myProfile ul li {
          padding: 5px;
          background-color: #c1e2ff;
          border: 1px solid black;
          border-radius: 10px;
          margin: 2px 0;
        }

        #resultContainer {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
  }

  #userBox,
  #msgBox {
    width: 80%; /* 모바일에서는 너비를 더 크게 설정 */
    margin: 0 auto; /* 중앙 정렬 */
  }

  #userBox > div {
    flex: 0 0 90%; /* 모바일에서 가로로 한 줄에 하나씩 배치 */
    height: auto; /* 높이를 자동으로 조정 */
    max-width: none; /* 최대 너비 제한 제거 */
    margin: auto;
  }
      }
      #mainSearchBox {
        display: flex;
        flex-direction: column;
        justify-content: start;
      }

      #main_page {
        border: 1px solid black;
      }
    </style>
  </head>

  <body>
    <header>
      <i class="fa-solid fa-bars" id="barsIcon" style="display: none"></i>
      <a href="#" id="logoLink" onclick="location.reload(); return false;">colla</a>

      <div id="search1">
        <i class="fa-solid fa-magnifying-glass"></i>
        <div id="mainSearchBox">
          <input type="text" id="mainSearch" placeholder="검색">
          <div id="searchBox"></div>
          <!-- 아래 수정. 위치 이동 -->
          <!-- <div id="userBox"></div> -->
          <!-- <div id="msgBox" style="display: flex; flex-direction: column;"></div> -->
        </div>
      </div>

      <i class="fa-solid fa-gear" id="gearIcon1"></i>
      <div class="options" id="optionsMenu">
        <div><a href="#">마이페이지</a></div>
        <div><a href="./siteinfo">사이트 정보</a></div>
        <div><a href="#">관리자 기능</a></div>
        <div><a href="#">로그아웃</a></div>
      </div>
    </header>

    <div id="search2" style="display: none">
      <i class="fa-solid fa-magnifying-glass"></i>
      <div id="mainSearchBox">
        <input type="text" id="mainSearch" placeholder="검색">
        <div id="searchBox"></div>
        <!-- 아래 수정. 위치 이동 -->
        <!-- <div id="userBox"></div> -->
        <!-- <div id="msgBox" style="display: flex; flex-direction: column;"></div> -->
      </div>
    </div>


    <!-- <i class="fa-solid fa-gear" id="gearIcon1"></i> -->
    <div class="options" id="optionsMenu">
      <div><a href="#">마이페이지</a></div>

      <div><a href="./siteinfo">사이트 정보</a></div>

      <div><a href="#">관리자 기능</a></div>
      <div><a href="#">로그아웃</a></div>
    </div>
  </header>

  <div id="search2" style="display: none">
    <i class="fa-solid fa-magnifying-glass"></i>
    <input type="text" id="searchBox2" placeholder="전체에서 검색" />
  </div>


  <main>
    <div id="sideBar">
      <div id="myProfile">
        <div class="profileBox">
          <i class="fa-solid fa-user"></i>
          <div id="connectUser"></div>
          <div onclick="logout()">로그아웃</div>
          <i class="fa-solid fa-gear" id="gearIcon2"></i>
        </div>
        <ul>
          <li>프로필 설정</li>
          <li>계정 설정</li>
          <li>로그아웃</li>
        </ul>
      </div>
      <div class="sideCategory" onclick="toggleSubCategory(this)">
        <span>채널 <i class="fa-solid fa-angles-down"></i></span>
        <ul>
          <li>공지사항</li>
          <li>경영팀</li>
          <li>생산팀</li>
          <li><a href="#">+</a>추가하기</li>
        </ul>
      </div>
      <div class="sideCategory" onclick="toggleSubCategory(this)">
        <span>채팅방 <i class="fa-solid fa-angles-down"></i></span>
        <ul id="allChattingRoom">
          <!-- <li onclick="joinRoom('이름: 홍길동')">이름: 홍길동</li> -->
          <!-- <li>채수빈</li> -->
        </ul>
      </div>
    </div>


    <div id="main_page">
      <div id="image"><img src="./images/main.png" alt="bear"></div>
      <div id="description">
        <p>프로젝트별 특정 주제의 그룹 대화는 "토픽"</p>
        <p>1:1 또는 그룹 대화는 "검색"을 이용해 보세요.</p>
      </div>
    </div>


    <!-- 헤더로부터 위치 이동 -->
    <div id="resultContainer" class="hidden">
      <div id="userBox" hidden></div>
      <!-- <div id="userSearchBox"> -->
      <p></p>
      <!-- 헤더로부터 위치 이동 -->
      <div id="msgBox" style="display: flex; flex-direction: column;" hidden></div>
      <!-- <div id="msgSearchBox"> -->
      <p></p>
    </div>
    </div>


    <!-- 채팅방 -->
    <div id="main_chat" hidden>

      <div id="chatContainer">
        <div id="user-container">
          <p id="nickname">채팅방 이름 또는 상대방 이름</p>
        </div>
        <div id="wrapper">
          <div id="display-container">
            <div class="msg-container" id="msgwrapper">
              <!-- 채팅 메시지가 여기에 동적으로 추가됩니다 -->
            </div>
          </div>
          <div id="send">
            <input type="text" id="chatting-input" placeholder="메시지를 입력하세요..." />
            <button id="send-button">전송</button>
          </div>
        </div>
      </div>
    </div>
  </main>



  <script>
    /*********1. socket 열기. 내 소켓 아이디 저장*/
    const socket = io();
    /*************검색 start(sim)********************/
    // detailSearch.ejs 파일에서
    const test = window.location.pathname;
    const test2 = test.split('/');
    const searchWord1 = test2[2];
    const searchWord = decodeURI(searchWord1);
    const search = document.querySelector('#mainSearch');
    const searchBox = document.querySelector('#searchBox');

    const main_page = document.querySelector('#main_page');
    const userBox = document.querySelector('#userBox');
    const msgBox = document.querySelector('#msgBox');
    const main_chat = document.querySelector('#main_chat');
    const resultContainer = document.querySelector("#resultContainer");

    let states = []; // 상태를 저장할 배열
    let currentIndex = 0; // 현재 상태의 인덱스
    let myId = "";
    let myName = "";
    (async function () {

      const res = await axios({
        method: 'get',
        url: '/api/colla/connect',
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`,
        },
      });
      console.log("dkdkdkd", res.data)
      const { username, id } = res.data.response;
      //const { id: roomId, chat } = res.data.rooms
      console.log(res.data.rooms)
      const rooms = res.data.rooms
      myId = id;
      myName = username;

      const chatlist = document.querySelector("#allChattingRoom")
      rooms.forEach(value => {
        const html = `
        <li onclick="joinRoom('${value.chat}', ${value.id})">${value.chat}</li> 
        `
        chatlist.insertAdjacentHTML("beforeend", html)
      })

      //profile에 나오는 dataValues : 는 무시해도 됨
      console.log('유저네임', username);
      document.querySelector('#connectUser').innerHTML = username;

    })();

    function logout() {
      window.localStorage.removeItem("token");
      document.location.href = ('/login');
      /* 5. 로그아웃 -> 소켓 연결 해제*/
    }

    // socket.emit('login', {username, email});
    
    // 초기 상태를 저장하는 함수
    646
 function saveInitialState() {
      const initialState = {
        mainPageHidden: main_page.hidden,
        userBoxHidden: userBox.hidden,
        msgBoxHidden: msgBox.hidden,
        mainChatHidden: main_chat.hidden,
        mainSearchContent: search.value,
        mainSearchUnable: search.disabled
      };
      states.push(initialState);
      // console.log("초기 상태 저장: ", initialState);
    }

    // 상태를 저장하는 함수
    function saveState() {
      const state = {
        mainPageHidden: main_page.hidden,
        userBoxHidden: userBox.hidden,
        msgBoxHidden: msgBox.hidden,
        mainChatHidden: main_chat.hidden,
        mainSearchContent: search.value,
        mainSearchUnable: search.disabled
      };
      states.push(state);
      currentIndex++;
      history.pushState({ index: currentIndex }, null, null);
      // console.log("상태 저장: ", state);
      // console.log("현재 인덱스: ", currentIndex);
    }

    // 상태 복원 함수
    function applyState(index) {
      const state = states[index];
      main_page.hidden = state.mainPageHidden;
      userBox.hidden = state.userBoxHidden;
      msgBox.hidden = state.msgBoxHidden;
      main_chat.hidden = state.mainChatHidden;
      search.value = state.mainSearchContent;
      search.disabled = state.mainSearchUnable;
      // console.log("상태 복원 인덱스: ", index);
    }


    // 페이지가 로드될 때 초기 상태를 저장합니다.
    window.onload = function () {
      saveInitialState();
      history.replaceState({ index: currentIndex }, null, null); // 현재 상태를 히스토리에 저장
    };

    // 뒤로가기 버튼을 눌렀을 때 상태를 복원
    window.onpopstate = function (event) {
      if (event.state && event.state.index !== undefined) {
        currentIndex = event.state.index;

        // 초기 상태(index=0)에 도달했을 때 뒤로가기를 멈추는 건데...안된다..!
        if (currentIndex <= 0) {
          currentIndex = 0;
          // applyState(currentIndex);
          // console.log("Reached initial state, can't go back further.");
          // window.location.href = '/main'
          // 왜 안돼??? 0 이하일때도 계속 다른 페이지로 이동. 
          // 로그인 페이지 연결한 후 다시 확인하기.
          return;
        }

        applyState(currentIndex);
        //console.log("뒤로가기(복원) 인덱스", currentIndex);

        history.replaceState({ index: currentIndex }, null, null);
        // currentIndex 감소
        // currentIndex--; //currentIndex = event.state.index;과 중복되므로 삭제.
      }
    };

   

    // 하이라이트 함수(검색 시 동일 내용 하이라이트)
    function highlightText(searchTerm, content) {
      if (!searchTerm) return content; // 검색어가 없을 때는 원본
      const regex = new RegExp(`(${searchTerm})`, 'gi'); // 검색어 찾기
      return content.replace(regex, '<span class="highlight">$1</span>'); // 일치하는 부분 <span>
    }


  // 검색 입력 이벤트 핸들러
  search.addEventListener("keyup", () => {
        if (search.value.length >= 2) {
          const searchTerm = search.value;
          axios({
            method: "get",
            url: `/api/colla/search/${searchTerm}`,
          }).then((res) => {
            if (res.data.result) {
              userBox.innerHTML = "";
              msgBox.innerHTML = "";

              res.data.userData.forEach((value) => { const saveuserName = value.username;
              const saveuserId = value.id;
              const saveuserDep = value.department;
              // const parse = JSON.stringify(infoData)
              ////console.log(parse)
              userBox.innerHTML +=
                `<div id='findByUsername' onclick='clickFindByUsername("${saveuserName}", "${saveuserId}", "${saveuserDep}")'>
                              <p>이름: ${highlightText(searchTerm,value.username)}</p>
                              <p>이메일: ${highlightText(searchTerm,value.email)}</p>
                              <p>부서: ${highlightText(searchTerm,value.department)}</p>
                              <br>
                          </div>`;
            });
              res.data.msgData.forEach((value) => {
                msgBox.innerHTML += `<div id="findByTalk" onclick="clickFindByTalk()">
                      <p>${highlightText(searchTerm, value.user.username)}</p>
                      <p>(${highlightText(searchTerm, value.user.department)})</p>
                      <p>: ${highlightText(searchTerm, value.talk)}</p>
                  </div>`;
              });

              // 결과 컨테이너를 보여주고, 세로로 배치하기 가로는 절대 안 돼
              resultContainer.hidden = false;
              resultContainer.classList.add("vertical-layout");

              main_page.hidden = true;
              userBox.hidden = false;
              msgBox.hidden = false;
            } else {
              userBox.innerText = "검색결과가 없습니다.";
              resultContainer.hidden = false; // 결과가 없을 때도 컨테이너를 보여줘라 ㅈㅂ
              msgBox.hidden = true; // 검색결과가 없으면 msgBox는 숨겨볼게요
            }
          });
        } else {
          userBox.innerText = "검색어는 두 글자 이상 입력해주세요";
          resultContainer.hidden = false;
          msgBox.hidden = true; // 검색어가 두 글자 미만일 때 msgBox를 숨기기
        }

        // 현재 상태를 저장합니다.
        saveState();
      });


    //난수 발생 함수
    function generateRandomString(length) {
      const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
      let result = '';
      const charactersLength = characters.length;
      for (let i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
      }
      return result;
    }
    //내 아이디 : myId. 상대방 아이디 : yourId

    let chatId = "";
    let chatName = "";
    // 클릭 이벤트 핸들러 (새로운 채팅방 생성, 상대방 초대)
    function clickFindByUsername(res1, res2, res3) {
      saveState(); // 상태를 저장합니다. -> 검색페이지 history 저장 위함.

      //console.log("이벤트핸들러 후 ", res1, res2, res3);

      // const {username, id, department} = JSON.parse(arg);
      //상대방 정보
      const yourName = res1;
      const yourId = res2;
      const yourDepartment = res3;
      // 이 위까지

      const userContainer = document.querySelector('#user-container');
      const input = document.querySelector('#chatting-input');
      const button = document.querySelector('#send-button');
      //채팅방 상단 이름
      userContainer.innerHTML = `<p id="nickname">${yourName} (${yourDepartment})</p>`;
      userBox.hidden = true;
      msgBox.hidden = true;
      main_chat.hidden = false;
      search.disabled = true;
      saveState(); // 상태를 저장합니다.

      //****************소켓
      // 방 생성
      // username -> chatName 변경
      chatName = myName + ", " + yourName;
      let joinRoom = ''
      axios({
        method: 'post',
        url: '/api/colla/createchat',
        data: {
          chatName,
          myId,
          yourId
        }
      }).then((res) => {
        // console.log('내이름: ',myName)
        console.log('dlrjdi?', res);
        chatId = res.data.response.id
        const flag = res.data.flag
        joinRoom = res.data.response.chat
        //socket.emit('join chat', res.id);
        // const myInfo = {chat, myId};
        const myInfo = { joinRoom, myId, chatId, flag };
        console.log("before join chat client", myInfo);
        socket.emit('join chat', myInfo);
        console.log("join chat client", myInfo);


        console.log("chatName: ", joinRoom)
        /* 3. 클릭한 상대 chat에 초대 */
        const yourInfo = { yourId, chatId, flag };
        socket.emit('invite chat', yourInfo);

        if (flag === 1) {
          const msg = res.data.response.msgs
          msg.forEach(value => {
            const { id, talk:talks, userId } = value;
            const talk = document.createElement('div');
            talk.classList.add('talk');
            const msgContainer = document.querySelector('.msg-container')
            const p = document.createElement('p')
            if( userId === myId) {
              p.classList.add('myMsg')
              console.log('내이름: ',myName)
            } else {
              p.classList.add('eachMsg')
            }
            p.textContent = userId===myId ? `${myName}: ${talks}`: `${yourName}: ${talks}`;
            talk.appendChild(p);
            msgContainer.appendChild(talk);

          })
        }
      })

      // socket.on('invited', function(chat) {
      //   alert(`You were invited to room: ${room}`);
      // });

      /* 4. 룸 내 메세지 브로드캐스트 */
      //const myname : 내 사용자 이름, 부서
      button.addEventListener('click', function () {
        console.log(chatId)
        console.log('내이름: ',myName)
        
        //console.log("전송버튼클릭");
        socket.emit('chat message', { myName, myId, value: input.value, chatId, joinRoom });
        //console.log("전송버튼클릭 후");
        console.log('전송후: ',myName)
        input.value = "";
      });


      socket.on('new chat message', (arg) => {
        const { msgUserName, msgUserId,value } = arg;
        // console.log('내이름 콘솔: ',myName)
        const myId = msgUserId
        const talk = document.createElement('div');
        talk.classList.add('talk');
        const msgContainer = document.querySelector('.msg-container')
        const p = document.createElement('p')
        p.classList.add('eachMsg')
        p.textContent = `${msgUserName}: ${value}`;
        talk.appendChild(p);
        console.log(msgUserName,msgUserId)
        //수정 버튼
        const editButton = document.createElement('button');
                editButton.textContent = '수정';
                editButton.classList.add('editButton');
                editButton.addEventListener('click', () => {
                    const editChat = prompt('새로운 메세지를 입력하세요', value);
                    if (editChat) {
                        p.textContent = `${myId}: ${editChat}`;
                    }
                });
               
        const deletebutton = document.createElement('button')
                deletebutton.textContent = '삭제'
                deletebutton.classList.add('deletebutton')
                deletebutton.addEventListener('click',()=>{
                  if(confirm('이 메세지를 삭제하시겠습니까?')){
                      socket.emit('deletechat',{messageId})
                      talk.remove()
                    }
                 })
        talk.appendChild(editButton);
        talk.appendChild(deletebutton)
        msgContainer.appendChild(talk);

      });
      

    }
   
    
    // 클릭 이벤트 핸들러 (참여중인 채팅방 입장)
    function clickFindByTalk() {
      saveState(); // 상태를 저장합니다. -> 검색페이지 history 저장 위함.
      const div = event.currentTarget;
      const ptags = div.querySelectorAll('p');
      const username = ptags[0].textContent;
      const department = ptags[1].textContent;
      const talk = ptags[2].textContent;
      const userContainer = document.querySelector('#user-container');
      userContainer.innerHTML = `<p id="nickname">${username} (${department})</p>`;

      userBox.hidden = true;
      msgBox.hidden = true;
      main_chat.hidden = false;
      search.disabled = true;
      saveState(); // 상태를 저장합니다.

      //****************소켓 연결
    }

    /**헤더 부분**/
    function toggleSubCategory(element) {
      element.classList.toggle("expanded");
    }
    function toggleOptionMenu(element) {
      element.classList.toggle("expanded");
    }
    /*detailSearch에서 추가로 들어가있던 코드. 헤더에서 사용하는 도중에 수정된듯.
        function toggleSubCategory(element) {
          const subCategories = element.querySelector("ul");
          if (subCategories.classList.contains("expanded")) {
            subCategories.classList.remove("expanded");
          } else {
            subCategories.classList.add("expanded");
          }
        }
    
        // Toggle options menu on fa-gear click
        document.getElementById('gearIcon').addEventListener('click', function() {
          const optionsMenu = document.getElementById('optionsMenu');
          if (optionsMenu.style.display === 'block') {
            optionsMenu.style.display = 'none';
          } else {
            optionsMenu.style.display = 'block';
          }
        });
        const search = document.querySelector('#mainSearch')
    */


    document
      .getElementById("gearIcon1")
      .addEventListener("click", function () {
        const optionsMenu = document.getElementById("optionsMenu");
        optionsMenu.classList.toggle("show");
      });
    document
      .getElementById("gearIcon2")
      .addEventListener("click", function () {
        const myProfile = document.getElementById("myProfile");
        myProfile.classList.toggle("expanded");
      });
    document
      .getElementById("barsIcon")
      .addEventListener("click", function () {
        const sideBar = document.getElementById("sideBar");
        sideBar.classList.toggle("show");
      });
    function joinRoom(chatName, chatId) {
      console.log(chatName)
      main_page.hidden = true;
      main_chat.hidden = false;

      axios({
        method: 'post',
        url: '/api/colla/createchat',
        data: {
          chatName,
          myId,
          yourId
        }
      }).then((res) => {
        console.log('dlrjdi?', res);
        chatId = res.data.result.id
        const flag = res.data.flag
        //socket.emit('join chat', res.id);
        // const myInfo = {chat, myId};
        const myInfo = { chatName, myId, chatId, flag };
        console.log("before join chat client", myInfo);
        socket.emit('join chat', myInfo);
        console.log("join chat client", myInfo);


        console.log("chatName: ", chatName)
        /* 3. 클릭한 상대 chat에 초대 */
        const yourInfo = { yourId, chatId, flag };
        socket.emit('invite chat', yourInfo);

        if (flag === 1) {
          const msg = res.data.response.msgs
          msg.forEach(value => {
            const { id, talk:talks, userId } = value;
            const talk = document.createElement('div');
            talk.classList.add('talk');
            const msgContainer = document.querySelector('.msg-container')
            const p = document.createElement('p')
            if( userId === myId) {
              p.classList.add('myMsg')
            } else {
              p.classList.add('eachMsg')
            }
            p.textContent = userId===myId ? `${myName}: ${talks}`: `${yourName}: ${talks}`;
            talk.appendChild(p);
            msgContainer.appendChild(talk);

          })
        }
      });

      const input = document.querySelector('#chatting-input');
      const button = document.querySelector('#send-button');
      socket.emit('join chat', { username, flag: 1 })

      button.addEventListener('click', function () {
        //console.log("전송버튼클릭");
        socket.emit('chat message', { myId, value: input.value, chatId, username });
        //console.log("전송버튼클릭 후");
        input.value = "";
      });

      //  console.log("..........", myId, input.value, chatId);

      socket.on('chat message', (arg) => {
        //console.log("chat message on", arg);

        const { myId, value, chat , messageId } = arg;
        const talk = document.createElement('div');
        talk.classList.add('talk');
        const msgContainer = document.querySelector('.msg-container')
        const p = document.createElement('p')
        p.classList.add('eachMsg')
        p.textContent = `${myId}: ${value}`;
        talk.appendChild(p);
        msgContainer.appendChild(talk);

        const editbutton = document.createElement('button')
        editbutton.textContent = '수정';
        editbutton.classList.add('editbutton')
        editbutton.addEventListener('click',()=>{
          const editChat = prompt('새로운 메세지를 입력하세요',value);
          if(editChat){
            p.textContent = `${myId}: ${value}`;
          }
        })
        const deletebutton = document.createElement('button')
        deletebutton.textContent = '삭제'
        deletebutton.classList.add('deletebutton')
        deletebutton.addEventListener('click',()=>{
          if(confirm('이 메세지를 삭제하시겠습니까?')){
            socket.emit('deletechat',{messageId})
            talk.remove()
          }
        })
        talk.appendChild(editbutton);
        talk.appendChild(deletebutton)
        // const nickname = document.createElement('p');
        // nickname.classList.add('nickname');
        // nickname.textContent = username;
        // const message = document.createElement('p');
        // message.textContent = value;
        // message.classList.add('chatting-list');
        // talk.appendChild(nickname);
        // talk.appendChild(message);
        // document.querySelector('.msg-container').appendChild(talk);

      });

    }
      //   (function () {
      //   const scollBottom = document
      //     .querySelector(".msg-container")
      //     .scrollTo(0, document.querySelector(".msg-container").scrollHeight);
      //   return scollBottom;
      // })();

      let scrollHeight = document.querySelector('.msg-container').scrollHeight;
      let clientHeight = document.querySelector('.msg-container').clientHeight;
      function addBoxes() {
        const wrap = document.querySelector('.msg-container');
        const numberOfNewBoxes = 10;
        const currentBoxCount = wrap.getElementsByClassName("talk").length;

        for (let i = 1; i <= numberOfNewBoxes; i++) {
          const newBox = document.createElement("div");
          newBox.className = "talk";
          newBox.textContent = currentBoxCount + i;
          wrap.prepend(newBox);
        }
      }

      // 이벤트 리스너 추가
      document.querySelector('.msg-container').addEventListener("scroll", () => {
        // console.log("클라이언트 높이", clientHeight);
        // console.log("스크롤 탑", document.querySelector('.msg-container').scrollTop);
        // console.log("스크롤 높이", scrollHeight);
        const wrap = document.querySelector('.msg-container');
        if (wrap.scrollTop === 0) {
          addBoxes();
          // 새 박스를 추가한 후 스크롤 위치를 유지
          wrap.scrollTop = 30;
        }
      });

  
  </script>
 
</body>

</html>